# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonAutoscalingInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_instances': 'int',
        'current_utilization': 'float',
        'max_instances': 'int',
        'min_instances': 'int',
        'target_instances': 'int'
    }

    attribute_map = {
        'current_instances': 'current_instances',
        'current_utilization': 'current_utilization',
        'max_instances': 'max_instances',
        'min_instances': 'min_instances',
        'target_instances': 'target_instances'
    }

    def __init__(self, current_instances=None, current_utilization=None, max_instances=None, min_instances=None, target_instances=None, local_vars_configuration=None):  # noqa: E501
        """MarathonAutoscalingInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current_instances = None
        self._current_utilization = None
        self._max_instances = None
        self._min_instances = None
        self._target_instances = None
        self.discriminator = None

        if current_instances is not None:
            self.current_instances = current_instances
        if current_utilization is not None:
            self.current_utilization = current_utilization
        if max_instances is not None:
            self.max_instances = max_instances
        if min_instances is not None:
            self.min_instances = min_instances
        if target_instances is not None:
            self.target_instances = target_instances

    @property
    def current_instances(self):
        """Gets the current_instances of this MarathonAutoscalingInfo.  # noqa: E501

        The number of instances of the service currently running  # noqa: E501

        :return: The current_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :rtype: int
        """
        return self._current_instances

    @current_instances.setter
    def current_instances(self, current_instances):
        """Sets the current_instances of this MarathonAutoscalingInfo.

        The number of instances of the service currently running  # noqa: E501

        :param current_instances: The current_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :type current_instances: int
        """

        self._current_instances = current_instances

    @property
    def current_utilization(self):
        """Gets the current_utilization of this MarathonAutoscalingInfo.  # noqa: E501

        The current utilization of the instances' allocated resources  # noqa: E501

        :return: The current_utilization of this MarathonAutoscalingInfo.  # noqa: E501
        :rtype: float
        """
        return self._current_utilization

    @current_utilization.setter
    def current_utilization(self, current_utilization):
        """Sets the current_utilization of this MarathonAutoscalingInfo.

        The current utilization of the instances' allocated resources  # noqa: E501

        :param current_utilization: The current_utilization of this MarathonAutoscalingInfo.  # noqa: E501
        :type current_utilization: float
        """

        self._current_utilization = current_utilization

    @property
    def max_instances(self):
        """Gets the max_instances of this MarathonAutoscalingInfo.  # noqa: E501

        The maximum number of instances that the autoscaler will scale to  # noqa: E501

        :return: The max_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this MarathonAutoscalingInfo.

        The maximum number of instances that the autoscaler will scale to  # noqa: E501

        :param max_instances: The max_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :type max_instances: int
        """

        self._max_instances = max_instances

    @property
    def min_instances(self):
        """Gets the min_instances of this MarathonAutoscalingInfo.  # noqa: E501

        The minimum number of instances that the autoscaler will scale to  # noqa: E501

        :return: The min_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this MarathonAutoscalingInfo.

        The minimum number of instances that the autoscaler will scale to  # noqa: E501

        :param min_instances: The min_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :type min_instances: int
        """

        self._min_instances = min_instances

    @property
    def target_instances(self):
        """Gets the target_instances of this MarathonAutoscalingInfo.  # noqa: E501

        The autoscaler's current target number of instances of this service to run  # noqa: E501

        :return: The target_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :rtype: int
        """
        return self._target_instances

    @target_instances.setter
    def target_instances(self, target_instances):
        """Sets the target_instances of this MarathonAutoscalingInfo.

        The autoscaler's current target number of instances of this service to run  # noqa: E501

        :param target_instances: The target_instances of this MarathonAutoscalingInfo.  # noqa: E501
        :type target_instances: int
        """

        self._target_instances = target_instances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonAutoscalingInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonAutoscalingInfo):
            return True

        return self.to_dict() != other.to_dict()
