# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class InstanceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'adhoc': 'list[AdhocLaunchHistory]',
        'flink': 'InstanceStatusFlink',
        'git_sha': 'str',
        'instance': 'str',
        'kafkacluster': 'InstanceStatusKafkacluster',
        'kubernetes': 'InstanceStatusKubernetes',
        'marathon': 'InstanceStatusMarathon',
        'service': 'str',
        'tron': 'InstanceStatusTron'
    }

    attribute_map = {
        'adhoc': 'adhoc',
        'flink': 'flink',
        'git_sha': 'git_sha',
        'instance': 'instance',
        'kafkacluster': 'kafkacluster',
        'kubernetes': 'kubernetes',
        'marathon': 'marathon',
        'service': 'service',
        'tron': 'tron'
    }

    def __init__(self, adhoc=None, flink=None, git_sha=None, instance=None, kafkacluster=None, kubernetes=None, marathon=None, service=None, tron=None, local_vars_configuration=None):  # noqa: E501
        """InstanceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._adhoc = None
        self._flink = None
        self._git_sha = None
        self._instance = None
        self._kafkacluster = None
        self._kubernetes = None
        self._marathon = None
        self._service = None
        self._tron = None
        self.discriminator = None

        if adhoc is not None:
            self.adhoc = adhoc
        if flink is not None:
            self.flink = flink
        if git_sha is not None:
            self.git_sha = git_sha
        if instance is not None:
            self.instance = instance
        if kafkacluster is not None:
            self.kafkacluster = kafkacluster
        if kubernetes is not None:
            self.kubernetes = kubernetes
        if marathon is not None:
            self.marathon = marathon
        if service is not None:
            self.service = service
        if tron is not None:
            self.tron = tron

    @property
    def adhoc(self):
        """Gets the adhoc of this InstanceStatus.  # noqa: E501

        List of runs associated with job  # noqa: E501

        :return: The adhoc of this InstanceStatus.  # noqa: E501
        :rtype: list[AdhocLaunchHistory]
        """
        return self._adhoc

    @adhoc.setter
    def adhoc(self, adhoc):
        """Sets the adhoc of this InstanceStatus.

        List of runs associated with job  # noqa: E501

        :param adhoc: The adhoc of this InstanceStatus.  # noqa: E501
        :type adhoc: list[AdhocLaunchHistory]
        """

        self._adhoc = adhoc

    @property
    def flink(self):
        """Gets the flink of this InstanceStatus.  # noqa: E501


        :return: The flink of this InstanceStatus.  # noqa: E501
        :rtype: InstanceStatusFlink
        """
        return self._flink

    @flink.setter
    def flink(self, flink):
        """Sets the flink of this InstanceStatus.


        :param flink: The flink of this InstanceStatus.  # noqa: E501
        :type flink: InstanceStatusFlink
        """

        self._flink = flink

    @property
    def git_sha(self):
        """Gets the git_sha of this InstanceStatus.  # noqa: E501

        Git sha of a service  # noqa: E501

        :return: The git_sha of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._git_sha

    @git_sha.setter
    def git_sha(self, git_sha):
        """Sets the git_sha of this InstanceStatus.

        Git sha of a service  # noqa: E501

        :param git_sha: The git_sha of this InstanceStatus.  # noqa: E501
        :type git_sha: str
        """

        self._git_sha = git_sha

    @property
    def instance(self):
        """Gets the instance of this InstanceStatus.  # noqa: E501

        Instance name  # noqa: E501

        :return: The instance of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this InstanceStatus.

        Instance name  # noqa: E501

        :param instance: The instance of this InstanceStatus.  # noqa: E501
        :type instance: str
        """

        self._instance = instance

    @property
    def kafkacluster(self):
        """Gets the kafkacluster of this InstanceStatus.  # noqa: E501


        :return: The kafkacluster of this InstanceStatus.  # noqa: E501
        :rtype: InstanceStatusKafkacluster
        """
        return self._kafkacluster

    @kafkacluster.setter
    def kafkacluster(self, kafkacluster):
        """Sets the kafkacluster of this InstanceStatus.


        :param kafkacluster: The kafkacluster of this InstanceStatus.  # noqa: E501
        :type kafkacluster: InstanceStatusKafkacluster
        """

        self._kafkacluster = kafkacluster

    @property
    def kubernetes(self):
        """Gets the kubernetes of this InstanceStatus.  # noqa: E501


        :return: The kubernetes of this InstanceStatus.  # noqa: E501
        :rtype: InstanceStatusKubernetes
        """
        return self._kubernetes

    @kubernetes.setter
    def kubernetes(self, kubernetes):
        """Sets the kubernetes of this InstanceStatus.


        :param kubernetes: The kubernetes of this InstanceStatus.  # noqa: E501
        :type kubernetes: InstanceStatusKubernetes
        """

        self._kubernetes = kubernetes

    @property
    def marathon(self):
        """Gets the marathon of this InstanceStatus.  # noqa: E501


        :return: The marathon of this InstanceStatus.  # noqa: E501
        :rtype: InstanceStatusMarathon
        """
        return self._marathon

    @marathon.setter
    def marathon(self, marathon):
        """Sets the marathon of this InstanceStatus.


        :param marathon: The marathon of this InstanceStatus.  # noqa: E501
        :type marathon: InstanceStatusMarathon
        """

        self._marathon = marathon

    @property
    def service(self):
        """Gets the service of this InstanceStatus.  # noqa: E501

        Service name  # noqa: E501

        :return: The service of this InstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this InstanceStatus.

        Service name  # noqa: E501

        :param service: The service of this InstanceStatus.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def tron(self):
        """Gets the tron of this InstanceStatus.  # noqa: E501


        :return: The tron of this InstanceStatus.  # noqa: E501
        :rtype: InstanceStatusTron
        """
        return self._tron

    @tron.setter
    def tron(self, tron):
        """Sets the tron of this InstanceStatus.


        :param tron: The tron of this InstanceStatus.  # noqa: E501
        :type tron: InstanceStatusTron
        """

        self._tron = tron

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceStatus):
            return True

        return self.to_dict() != other.to_dict()
