# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class InstanceStatusMarathon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_count': 'int',
        'app_statuses': 'list[MarathonAppStatus]',
        'autoscaling_info': 'MarathonAutoscalingInfo',
        'backoff_seconds': 'int',
        'bounce_method': 'str',
        'deploy_status': 'str',
        'desired_app_id': 'str',
        'desired_state': 'str',
        'envoy': 'EnvoyStatus',
        'error_message': 'str',
        'expected_instance_count': 'int',
        'mesos': 'MarathonMesosStatus',
        'running_instance_count': 'int',
        'smartstack': 'SmartstackStatus'
    }

    attribute_map = {
        'app_count': 'app_count',
        'app_statuses': 'app_statuses',
        'autoscaling_info': 'autoscaling_info',
        'backoff_seconds': 'backoff_seconds',
        'bounce_method': 'bounce_method',
        'deploy_status': 'deploy_status',
        'desired_app_id': 'desired_app_id',
        'desired_state': 'desired_state',
        'envoy': 'envoy',
        'error_message': 'error_message',
        'expected_instance_count': 'expected_instance_count',
        'mesos': 'mesos',
        'running_instance_count': 'running_instance_count',
        'smartstack': 'smartstack'
    }

    def __init__(self, app_count=None, app_statuses=None, autoscaling_info=None, backoff_seconds=None, bounce_method=None, deploy_status=None, desired_app_id=None, desired_state=None, envoy=None, error_message=None, expected_instance_count=None, mesos=None, running_instance_count=None, smartstack=None, local_vars_configuration=None):  # noqa: E501
        """InstanceStatusMarathon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_count = None
        self._app_statuses = None
        self._autoscaling_info = None
        self._backoff_seconds = None
        self._bounce_method = None
        self._deploy_status = None
        self._desired_app_id = None
        self._desired_state = None
        self._envoy = None
        self._error_message = None
        self._expected_instance_count = None
        self._mesos = None
        self._running_instance_count = None
        self._smartstack = None
        self.discriminator = None

        self.app_count = app_count
        if app_statuses is not None:
            self.app_statuses = app_statuses
        if autoscaling_info is not None:
            self.autoscaling_info = autoscaling_info
        if backoff_seconds is not None:
            self.backoff_seconds = backoff_seconds
        self.bounce_method = bounce_method
        if deploy_status is not None:
            self.deploy_status = deploy_status
        if desired_app_id is not None:
            self.desired_app_id = desired_app_id
        self.desired_state = desired_state
        if envoy is not None:
            self.envoy = envoy
        if error_message is not None:
            self.error_message = error_message
        if expected_instance_count is not None:
            self.expected_instance_count = expected_instance_count
        if mesos is not None:
            self.mesos = mesos
        if running_instance_count is not None:
            self.running_instance_count = running_instance_count
        if smartstack is not None:
            self.smartstack = smartstack

    @property
    def app_count(self):
        """Gets the app_count of this InstanceStatusMarathon.  # noqa: E501

        The number of different running versions of the same service (0 for stopped, 1 for running and 1+ for bouncing)  # noqa: E501

        :return: The app_count of this InstanceStatusMarathon.  # noqa: E501
        :rtype: int
        """
        return self._app_count

    @app_count.setter
    def app_count(self, app_count):
        """Sets the app_count of this InstanceStatusMarathon.

        The number of different running versions of the same service (0 for stopped, 1 for running and 1+ for bouncing)  # noqa: E501

        :param app_count: The app_count of this InstanceStatusMarathon.  # noqa: E501
        :type app_count: int
        """
        if self.local_vars_configuration.client_side_validation and app_count is None:  # noqa: E501
            raise ValueError("Invalid value for `app_count`, must not be `None`")  # noqa: E501

        self._app_count = app_count

    @property
    def app_statuses(self):
        """Gets the app_statuses of this InstanceStatusMarathon.  # noqa: E501

        Statuses of each app of the service  # noqa: E501

        :return: The app_statuses of this InstanceStatusMarathon.  # noqa: E501
        :rtype: list[MarathonAppStatus]
        """
        return self._app_statuses

    @app_statuses.setter
    def app_statuses(self, app_statuses):
        """Sets the app_statuses of this InstanceStatusMarathon.

        Statuses of each app of the service  # noqa: E501

        :param app_statuses: The app_statuses of this InstanceStatusMarathon.  # noqa: E501
        :type app_statuses: list[MarathonAppStatus]
        """

        self._app_statuses = app_statuses

    @property
    def autoscaling_info(self):
        """Gets the autoscaling_info of this InstanceStatusMarathon.  # noqa: E501


        :return: The autoscaling_info of this InstanceStatusMarathon.  # noqa: E501
        :rtype: MarathonAutoscalingInfo
        """
        return self._autoscaling_info

    @autoscaling_info.setter
    def autoscaling_info(self, autoscaling_info):
        """Sets the autoscaling_info of this InstanceStatusMarathon.


        :param autoscaling_info: The autoscaling_info of this InstanceStatusMarathon.  # noqa: E501
        :type autoscaling_info: MarathonAutoscalingInfo
        """

        self._autoscaling_info = autoscaling_info

    @property
    def backoff_seconds(self):
        """Gets the backoff_seconds of this InstanceStatusMarathon.  # noqa: E501

        backoff in seconds before launching the next task  # noqa: E501

        :return: The backoff_seconds of this InstanceStatusMarathon.  # noqa: E501
        :rtype: int
        """
        return self._backoff_seconds

    @backoff_seconds.setter
    def backoff_seconds(self, backoff_seconds):
        """Sets the backoff_seconds of this InstanceStatusMarathon.

        backoff in seconds before launching the next task  # noqa: E501

        :param backoff_seconds: The backoff_seconds of this InstanceStatusMarathon.  # noqa: E501
        :type backoff_seconds: int
        """

        self._backoff_seconds = backoff_seconds

    @property
    def bounce_method(self):
        """Gets the bounce_method of this InstanceStatusMarathon.  # noqa: E501

        Method to transit between new and old versions of a service  # noqa: E501

        :return: The bounce_method of this InstanceStatusMarathon.  # noqa: E501
        :rtype: str
        """
        return self._bounce_method

    @bounce_method.setter
    def bounce_method(self, bounce_method):
        """Sets the bounce_method of this InstanceStatusMarathon.

        Method to transit between new and old versions of a service  # noqa: E501

        :param bounce_method: The bounce_method of this InstanceStatusMarathon.  # noqa: E501
        :type bounce_method: str
        """
        if self.local_vars_configuration.client_side_validation and bounce_method is None:  # noqa: E501
            raise ValueError("Invalid value for `bounce_method`, must not be `None`")  # noqa: E501
        allowed_values = ["brutal", "upthendown", "downthenup", "crossover"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and bounce_method not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `bounce_method` ({0}), must be one of {1}"  # noqa: E501
                .format(bounce_method, allowed_values)
            )

        self._bounce_method = bounce_method

    @property
    def deploy_status(self):
        """Gets the deploy_status of this InstanceStatusMarathon.  # noqa: E501

        Deploy status of a marathon service  # noqa: E501

        :return: The deploy_status of this InstanceStatusMarathon.  # noqa: E501
        :rtype: str
        """
        return self._deploy_status

    @deploy_status.setter
    def deploy_status(self, deploy_status):
        """Sets the deploy_status of this InstanceStatusMarathon.

        Deploy status of a marathon service  # noqa: E501

        :param deploy_status: The deploy_status of this InstanceStatusMarathon.  # noqa: E501
        :type deploy_status: str
        """
        allowed_values = ["Running", "Deploying", "Stopped", "Delayed", "Waiting", "Waiting for bounce", "NotRunning"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and deploy_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `deploy_status` ({0}), must be one of {1}"  # noqa: E501
                .format(deploy_status, allowed_values)
            )

        self._deploy_status = deploy_status

    @property
    def desired_app_id(self):
        """Gets the desired_app_id of this InstanceStatusMarathon.  # noqa: E501

        ID of the desired version of a service instance  # noqa: E501

        :return: The desired_app_id of this InstanceStatusMarathon.  # noqa: E501
        :rtype: str
        """
        return self._desired_app_id

    @desired_app_id.setter
    def desired_app_id(self, desired_app_id):
        """Sets the desired_app_id of this InstanceStatusMarathon.

        ID of the desired version of a service instance  # noqa: E501

        :param desired_app_id: The desired_app_id of this InstanceStatusMarathon.  # noqa: E501
        :type desired_app_id: str
        """

        self._desired_app_id = desired_app_id

    @property
    def desired_state(self):
        """Gets the desired_state of this InstanceStatusMarathon.  # noqa: E501

        Desired state of a service, for Marathon  # noqa: E501

        :return: The desired_state of this InstanceStatusMarathon.  # noqa: E501
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this InstanceStatusMarathon.

        Desired state of a service, for Marathon  # noqa: E501

        :param desired_state: The desired_state of this InstanceStatusMarathon.  # noqa: E501
        :type desired_state: str
        """
        if self.local_vars_configuration.client_side_validation and desired_state is None:  # noqa: E501
            raise ValueError("Invalid value for `desired_state`, must not be `None`")  # noqa: E501
        allowed_values = ["start", "stop"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and desired_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"  # noqa: E501
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def envoy(self):
        """Gets the envoy of this InstanceStatusMarathon.  # noqa: E501


        :return: The envoy of this InstanceStatusMarathon.  # noqa: E501
        :rtype: EnvoyStatus
        """
        return self._envoy

    @envoy.setter
    def envoy(self, envoy):
        """Sets the envoy of this InstanceStatusMarathon.


        :param envoy: The envoy of this InstanceStatusMarathon.  # noqa: E501
        :type envoy: EnvoyStatus
        """

        self._envoy = envoy

    @property
    def error_message(self):
        """Gets the error_message of this InstanceStatusMarathon.  # noqa: E501

        Error message when a marathon job ID cannot be found  # noqa: E501

        :return: The error_message of this InstanceStatusMarathon.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InstanceStatusMarathon.

        Error message when a marathon job ID cannot be found  # noqa: E501

        :param error_message: The error_message of this InstanceStatusMarathon.  # noqa: E501
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def expected_instance_count(self):
        """Gets the expected_instance_count of this InstanceStatusMarathon.  # noqa: E501

        The number of desired instances of the service  # noqa: E501

        :return: The expected_instance_count of this InstanceStatusMarathon.  # noqa: E501
        :rtype: int
        """
        return self._expected_instance_count

    @expected_instance_count.setter
    def expected_instance_count(self, expected_instance_count):
        """Sets the expected_instance_count of this InstanceStatusMarathon.

        The number of desired instances of the service  # noqa: E501

        :param expected_instance_count: The expected_instance_count of this InstanceStatusMarathon.  # noqa: E501
        :type expected_instance_count: int
        """

        self._expected_instance_count = expected_instance_count

    @property
    def mesos(self):
        """Gets the mesos of this InstanceStatusMarathon.  # noqa: E501


        :return: The mesos of this InstanceStatusMarathon.  # noqa: E501
        :rtype: MarathonMesosStatus
        """
        return self._mesos

    @mesos.setter
    def mesos(self, mesos):
        """Sets the mesos of this InstanceStatusMarathon.


        :param mesos: The mesos of this InstanceStatusMarathon.  # noqa: E501
        :type mesos: MarathonMesosStatus
        """

        self._mesos = mesos

    @property
    def running_instance_count(self):
        """Gets the running_instance_count of this InstanceStatusMarathon.  # noqa: E501

        The number of actual running instances of the service  # noqa: E501

        :return: The running_instance_count of this InstanceStatusMarathon.  # noqa: E501
        :rtype: int
        """
        return self._running_instance_count

    @running_instance_count.setter
    def running_instance_count(self, running_instance_count):
        """Sets the running_instance_count of this InstanceStatusMarathon.

        The number of actual running instances of the service  # noqa: E501

        :param running_instance_count: The running_instance_count of this InstanceStatusMarathon.  # noqa: E501
        :type running_instance_count: int
        """

        self._running_instance_count = running_instance_count

    @property
    def smartstack(self):
        """Gets the smartstack of this InstanceStatusMarathon.  # noqa: E501


        :return: The smartstack of this InstanceStatusMarathon.  # noqa: E501
        :rtype: SmartstackStatus
        """
        return self._smartstack

    @smartstack.setter
    def smartstack(self, smartstack):
        """Sets the smartstack of this InstanceStatusMarathon.


        :param smartstack: The smartstack of this InstanceStatusMarathon.  # noqa: E501
        :type smartstack: SmartstackStatus
        """

        self._smartstack = smartstack

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStatusMarathon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceStatusMarathon):
            return True

        return self.to_dict() != other.to_dict()
