# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonMesosRunningTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_shares': 'FloatAndError',
        'cpu_used_seconds': 'FloatAndError',
        'deployed_timestamp': 'float',
        'duration_seconds': 'int',
        'hostname': 'str',
        'id': 'str',
        'mem_limit': 'IntegerAndError',
        'rss': 'IntegerAndError',
        'tail_lines': 'TaskTailLines'
    }

    attribute_map = {
        'cpu_shares': 'cpu_shares',
        'cpu_used_seconds': 'cpu_used_seconds',
        'deployed_timestamp': 'deployed_timestamp',
        'duration_seconds': 'duration_seconds',
        'hostname': 'hostname',
        'id': 'id',
        'mem_limit': 'mem_limit',
        'rss': 'rss',
        'tail_lines': 'tail_lines'
    }

    def __init__(self, cpu_shares=None, cpu_used_seconds=None, deployed_timestamp=None, duration_seconds=None, hostname=None, id=None, mem_limit=None, rss=None, tail_lines=None, local_vars_configuration=None):  # noqa: E501
        """MarathonMesosRunningTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_shares = None
        self._cpu_used_seconds = None
        self._deployed_timestamp = None
        self._duration_seconds = None
        self._hostname = None
        self._id = None
        self._mem_limit = None
        self._rss = None
        self._tail_lines = None
        self.discriminator = None

        if cpu_shares is not None:
            self.cpu_shares = cpu_shares
        if cpu_used_seconds is not None:
            self.cpu_used_seconds = cpu_used_seconds
        if deployed_timestamp is not None:
            self.deployed_timestamp = deployed_timestamp
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if mem_limit is not None:
            self.mem_limit = mem_limit
        if rss is not None:
            self.rss = rss
        if tail_lines is not None:
            self.tail_lines = tail_lines

    @property
    def cpu_shares(self):
        """Gets the cpu_shares of this MarathonMesosRunningTask.  # noqa: E501


        :return: The cpu_shares of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: FloatAndError
        """
        return self._cpu_shares

    @cpu_shares.setter
    def cpu_shares(self, cpu_shares):
        """Sets the cpu_shares of this MarathonMesosRunningTask.


        :param cpu_shares: The cpu_shares of this MarathonMesosRunningTask.  # noqa: E501
        :type cpu_shares: FloatAndError
        """

        self._cpu_shares = cpu_shares

    @property
    def cpu_used_seconds(self):
        """Gets the cpu_used_seconds of this MarathonMesosRunningTask.  # noqa: E501


        :return: The cpu_used_seconds of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: FloatAndError
        """
        return self._cpu_used_seconds

    @cpu_used_seconds.setter
    def cpu_used_seconds(self, cpu_used_seconds):
        """Sets the cpu_used_seconds of this MarathonMesosRunningTask.


        :param cpu_used_seconds: The cpu_used_seconds of this MarathonMesosRunningTask.  # noqa: E501
        :type cpu_used_seconds: FloatAndError
        """

        self._cpu_used_seconds = cpu_used_seconds

    @property
    def deployed_timestamp(self):
        """Gets the deployed_timestamp of this MarathonMesosRunningTask.  # noqa: E501

        The unix timestamp at which the task was deployed  # noqa: E501

        :return: The deployed_timestamp of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: float
        """
        return self._deployed_timestamp

    @deployed_timestamp.setter
    def deployed_timestamp(self, deployed_timestamp):
        """Sets the deployed_timestamp of this MarathonMesosRunningTask.

        The unix timestamp at which the task was deployed  # noqa: E501

        :param deployed_timestamp: The deployed_timestamp of this MarathonMesosRunningTask.  # noqa: E501
        :type deployed_timestamp: float
        """

        self._deployed_timestamp = deployed_timestamp

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this MarathonMesosRunningTask.  # noqa: E501

        The duration over which the task has been running in seconds  # noqa: E501

        :return: The duration_seconds of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this MarathonMesosRunningTask.

        The duration over which the task has been running in seconds  # noqa: E501

        :param duration_seconds: The duration_seconds of this MarathonMesosRunningTask.  # noqa: E501
        :type duration_seconds: int
        """

        self._duration_seconds = duration_seconds

    @property
    def hostname(self):
        """Gets the hostname of this MarathonMesosRunningTask.  # noqa: E501

        Name of the Mesos agent on which this task is running  # noqa: E501

        :return: The hostname of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this MarathonMesosRunningTask.

        Name of the Mesos agent on which this task is running  # noqa: E501

        :param hostname: The hostname of this MarathonMesosRunningTask.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this MarathonMesosRunningTask.  # noqa: E501

        The ID of the task in Mesos  # noqa: E501

        :return: The id of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarathonMesosRunningTask.

        The ID of the task in Mesos  # noqa: E501

        :param id: The id of this MarathonMesosRunningTask.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def mem_limit(self):
        """Gets the mem_limit of this MarathonMesosRunningTask.  # noqa: E501


        :return: The mem_limit of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: IntegerAndError
        """
        return self._mem_limit

    @mem_limit.setter
    def mem_limit(self, mem_limit):
        """Sets the mem_limit of this MarathonMesosRunningTask.


        :param mem_limit: The mem_limit of this MarathonMesosRunningTask.  # noqa: E501
        :type mem_limit: IntegerAndError
        """

        self._mem_limit = mem_limit

    @property
    def rss(self):
        """Gets the rss of this MarathonMesosRunningTask.  # noqa: E501


        :return: The rss of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: IntegerAndError
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this MarathonMesosRunningTask.


        :param rss: The rss of this MarathonMesosRunningTask.  # noqa: E501
        :type rss: IntegerAndError
        """

        self._rss = rss

    @property
    def tail_lines(self):
        """Gets the tail_lines of this MarathonMesosRunningTask.  # noqa: E501


        :return: The tail_lines of this MarathonMesosRunningTask.  # noqa: E501
        :rtype: TaskTailLines
        """
        return self._tail_lines

    @tail_lines.setter
    def tail_lines(self, tail_lines):
        """Sets the tail_lines of this MarathonMesosRunningTask.


        :param tail_lines: The tail_lines of this MarathonMesosRunningTask.  # noqa: E501
        :type tail_lines: TaskTailLines
        """

        self._tail_lines = tail_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonMesosRunningTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonMesosRunningTask):
            return True

        return self.to_dict() != other.to_dict()
