# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class EnvoyLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backends': 'list[EnvoyBackend]',
        'is_proxied_through_casper': 'bool',
        'name': 'str',
        'running_backends_count': 'int'
    }

    attribute_map = {
        'backends': 'backends',
        'is_proxied_through_casper': 'is_proxied_through_casper',
        'name': 'name',
        'running_backends_count': 'running_backends_count'
    }

    def __init__(self, backends=None, is_proxied_through_casper=None, name=None, running_backends_count=None, local_vars_configuration=None):  # noqa: E501
        """EnvoyLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backends = None
        self._is_proxied_through_casper = None
        self._name = None
        self._running_backends_count = None
        self.discriminator = None

        if backends is not None:
            self.backends = backends
        if is_proxied_through_casper is not None:
            self.is_proxied_through_casper = is_proxied_through_casper
        if name is not None:
            self.name = name
        if running_backends_count is not None:
            self.running_backends_count = running_backends_count

    @property
    def backends(self):
        """Gets the backends of this EnvoyLocation.  # noqa: E501

        Envoy backends running in this location  # noqa: E501

        :return: The backends of this EnvoyLocation.  # noqa: E501
        :rtype: list[EnvoyBackend]
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this EnvoyLocation.

        Envoy backends running in this location  # noqa: E501

        :param backends: The backends of this EnvoyLocation.  # noqa: E501
        :type backends: list[EnvoyBackend]
        """

        self._backends = backends

    @property
    def is_proxied_through_casper(self):
        """Gets the is_proxied_through_casper of this EnvoyLocation.  # noqa: E501

        Whether this backend is proxied through Casper  # noqa: E501

        :return: The is_proxied_through_casper of this EnvoyLocation.  # noqa: E501
        :rtype: bool
        """
        return self._is_proxied_through_casper

    @is_proxied_through_casper.setter
    def is_proxied_through_casper(self, is_proxied_through_casper):
        """Sets the is_proxied_through_casper of this EnvoyLocation.

        Whether this backend is proxied through Casper  # noqa: E501

        :param is_proxied_through_casper: The is_proxied_through_casper of this EnvoyLocation.  # noqa: E501
        :type is_proxied_through_casper: bool
        """

        self._is_proxied_through_casper = is_proxied_through_casper

    @property
    def name(self):
        """Gets the name of this EnvoyLocation.  # noqa: E501

        Name of the location  # noqa: E501

        :return: The name of this EnvoyLocation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnvoyLocation.

        Name of the location  # noqa: E501

        :param name: The name of this EnvoyLocation.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def running_backends_count(self):
        """Gets the running_backends_count of this EnvoyLocation.  # noqa: E501

        Number of running backends for the service in this location  # noqa: E501

        :return: The running_backends_count of this EnvoyLocation.  # noqa: E501
        :rtype: int
        """
        return self._running_backends_count

    @running_backends_count.setter
    def running_backends_count(self, running_backends_count):
        """Sets the running_backends_count of this EnvoyLocation.

        Number of running backends for the service in this location  # noqa: E501

        :param running_backends_count: The running_backends_count of this EnvoyLocation.  # noqa: E501
        :type running_backends_count: int
        """

        self._running_backends_count = running_backends_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvoyLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvoyLocation):
            return True

        return self.to_dict() != other.to_dict()
