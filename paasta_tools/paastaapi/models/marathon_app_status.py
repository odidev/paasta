# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonAppStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backoff_seconds': 'int',
        'create_timestamp': 'float',
        'dashboard_url': 'str',
        'deploy_status': 'str',
        'tasks': 'list[MarathonTask]',
        'tasks_healthy': 'int',
        'tasks_running': 'int',
        'tasks_staged': 'int',
        'tasks_total': 'int',
        'unused_offer_reason_counts': 'object'
    }

    attribute_map = {
        'backoff_seconds': 'backoff_seconds',
        'create_timestamp': 'create_timestamp',
        'dashboard_url': 'dashboard_url',
        'deploy_status': 'deploy_status',
        'tasks': 'tasks',
        'tasks_healthy': 'tasks_healthy',
        'tasks_running': 'tasks_running',
        'tasks_staged': 'tasks_staged',
        'tasks_total': 'tasks_total',
        'unused_offer_reason_counts': 'unused_offer_reason_counts'
    }

    def __init__(self, backoff_seconds=None, create_timestamp=None, dashboard_url=None, deploy_status=None, tasks=None, tasks_healthy=None, tasks_running=None, tasks_staged=None, tasks_total=None, unused_offer_reason_counts=None, local_vars_configuration=None):  # noqa: E501
        """MarathonAppStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backoff_seconds = None
        self._create_timestamp = None
        self._dashboard_url = None
        self._deploy_status = None
        self._tasks = None
        self._tasks_healthy = None
        self._tasks_running = None
        self._tasks_staged = None
        self._tasks_total = None
        self._unused_offer_reason_counts = None
        self.discriminator = None

        if backoff_seconds is not None:
            self.backoff_seconds = backoff_seconds
        if create_timestamp is not None:
            self.create_timestamp = create_timestamp
        if dashboard_url is not None:
            self.dashboard_url = dashboard_url
        if deploy_status is not None:
            self.deploy_status = deploy_status
        if tasks is not None:
            self.tasks = tasks
        if tasks_healthy is not None:
            self.tasks_healthy = tasks_healthy
        if tasks_running is not None:
            self.tasks_running = tasks_running
        if tasks_staged is not None:
            self.tasks_staged = tasks_staged
        if tasks_total is not None:
            self.tasks_total = tasks_total
        if unused_offer_reason_counts is not None:
            self.unused_offer_reason_counts = unused_offer_reason_counts

    @property
    def backoff_seconds(self):
        """Gets the backoff_seconds of this MarathonAppStatus.  # noqa: E501

        Backoff in seconds before launching next task  # noqa: E501

        :return: The backoff_seconds of this MarathonAppStatus.  # noqa: E501
        :rtype: int
        """
        return self._backoff_seconds

    @backoff_seconds.setter
    def backoff_seconds(self, backoff_seconds):
        """Sets the backoff_seconds of this MarathonAppStatus.

        Backoff in seconds before launching next task  # noqa: E501

        :param backoff_seconds: The backoff_seconds of this MarathonAppStatus.  # noqa: E501
        :type backoff_seconds: int
        """

        self._backoff_seconds = backoff_seconds

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this MarathonAppStatus.  # noqa: E501

        Unix timestamp when this app was created  # noqa: E501

        :return: The create_timestamp of this MarathonAppStatus.  # noqa: E501
        :rtype: float
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this MarathonAppStatus.

        Unix timestamp when this app was created  # noqa: E501

        :param create_timestamp: The create_timestamp of this MarathonAppStatus.  # noqa: E501
        :type create_timestamp: float
        """

        self._create_timestamp = create_timestamp

    @property
    def dashboard_url(self):
        """Gets the dashboard_url of this MarathonAppStatus.  # noqa: E501

        Marathon dashboard URL for this app  # noqa: E501

        :return: The dashboard_url of this MarathonAppStatus.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_url

    @dashboard_url.setter
    def dashboard_url(self, dashboard_url):
        """Sets the dashboard_url of this MarathonAppStatus.

        Marathon dashboard URL for this app  # noqa: E501

        :param dashboard_url: The dashboard_url of this MarathonAppStatus.  # noqa: E501
        :type dashboard_url: str
        """

        self._dashboard_url = dashboard_url

    @property
    def deploy_status(self):
        """Gets the deploy_status of this MarathonAppStatus.  # noqa: E501

        Deploy status of this app  # noqa: E501

        :return: The deploy_status of this MarathonAppStatus.  # noqa: E501
        :rtype: str
        """
        return self._deploy_status

    @deploy_status.setter
    def deploy_status(self, deploy_status):
        """Sets the deploy_status of this MarathonAppStatus.

        Deploy status of this app  # noqa: E501

        :param deploy_status: The deploy_status of this MarathonAppStatus.  # noqa: E501
        :type deploy_status: str
        """

        self._deploy_status = deploy_status

    @property
    def tasks(self):
        """Gets the tasks of this MarathonAppStatus.  # noqa: E501

        Tasks associated to this app  # noqa: E501

        :return: The tasks of this MarathonAppStatus.  # noqa: E501
        :rtype: list[MarathonTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this MarathonAppStatus.

        Tasks associated to this app  # noqa: E501

        :param tasks: The tasks of this MarathonAppStatus.  # noqa: E501
        :type tasks: list[MarathonTask]
        """

        self._tasks = tasks

    @property
    def tasks_healthy(self):
        """Gets the tasks_healthy of this MarathonAppStatus.  # noqa: E501

        Number of healthy tasks for this app  # noqa: E501

        :return: The tasks_healthy of this MarathonAppStatus.  # noqa: E501
        :rtype: int
        """
        return self._tasks_healthy

    @tasks_healthy.setter
    def tasks_healthy(self, tasks_healthy):
        """Sets the tasks_healthy of this MarathonAppStatus.

        Number of healthy tasks for this app  # noqa: E501

        :param tasks_healthy: The tasks_healthy of this MarathonAppStatus.  # noqa: E501
        :type tasks_healthy: int
        """

        self._tasks_healthy = tasks_healthy

    @property
    def tasks_running(self):
        """Gets the tasks_running of this MarathonAppStatus.  # noqa: E501

        Number running tasks for this app  # noqa: E501

        :return: The tasks_running of this MarathonAppStatus.  # noqa: E501
        :rtype: int
        """
        return self._tasks_running

    @tasks_running.setter
    def tasks_running(self, tasks_running):
        """Sets the tasks_running of this MarathonAppStatus.

        Number running tasks for this app  # noqa: E501

        :param tasks_running: The tasks_running of this MarathonAppStatus.  # noqa: E501
        :type tasks_running: int
        """

        self._tasks_running = tasks_running

    @property
    def tasks_staged(self):
        """Gets the tasks_staged of this MarathonAppStatus.  # noqa: E501

        Number of staged tasks for this app  # noqa: E501

        :return: The tasks_staged of this MarathonAppStatus.  # noqa: E501
        :rtype: int
        """
        return self._tasks_staged

    @tasks_staged.setter
    def tasks_staged(self, tasks_staged):
        """Sets the tasks_staged of this MarathonAppStatus.

        Number of staged tasks for this app  # noqa: E501

        :param tasks_staged: The tasks_staged of this MarathonAppStatus.  # noqa: E501
        :type tasks_staged: int
        """

        self._tasks_staged = tasks_staged

    @property
    def tasks_total(self):
        """Gets the tasks_total of this MarathonAppStatus.  # noqa: E501

        Total number of tasks for this app  # noqa: E501

        :return: The tasks_total of this MarathonAppStatus.  # noqa: E501
        :rtype: int
        """
        return self._tasks_total

    @tasks_total.setter
    def tasks_total(self, tasks_total):
        """Sets the tasks_total of this MarathonAppStatus.

        Total number of tasks for this app  # noqa: E501

        :param tasks_total: The tasks_total of this MarathonAppStatus.  # noqa: E501
        :type tasks_total: int
        """

        self._tasks_total = tasks_total

    @property
    def unused_offer_reason_counts(self):
        """Gets the unused_offer_reason_counts of this MarathonAppStatus.  # noqa: E501

        Mapping of reason offer was refused to the number of times that type of refusal was seen  # noqa: E501

        :return: The unused_offer_reason_counts of this MarathonAppStatus.  # noqa: E501
        :rtype: object
        """
        return self._unused_offer_reason_counts

    @unused_offer_reason_counts.setter
    def unused_offer_reason_counts(self, unused_offer_reason_counts):
        """Sets the unused_offer_reason_counts of this MarathonAppStatus.

        Mapping of reason offer was refused to the number of times that type of refusal was seen  # noqa: E501

        :param unused_offer_reason_counts: The unused_offer_reason_counts of this MarathonAppStatus.  # noqa: E501
        :type unused_offer_reason_counts: object
        """

        self._unused_offer_reason_counts = unused_offer_reason_counts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonAppStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonAppStatus):
            return True

        return self.to_dict() != other.to_dict()
