# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class KubernetesPod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'containers': 'list[KubernetesContainer]',
        'deployed_timestamp': 'float',
        'host': 'str',
        'message': 'str',
        'name': 'str',
        'phase': 'str',
        'ready': 'bool',
        'reason': 'str'
    }

    attribute_map = {
        'containers': 'containers',
        'deployed_timestamp': 'deployed_timestamp',
        'host': 'host',
        'message': 'message',
        'name': 'name',
        'phase': 'phase',
        'ready': 'ready',
        'reason': 'reason'
    }

    def __init__(self, containers=None, deployed_timestamp=None, host=None, message=None, name=None, phase=None, ready=None, reason=None, local_vars_configuration=None):  # noqa: E501
        """KubernetesPod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._containers = None
        self._deployed_timestamp = None
        self._host = None
        self._message = None
        self._name = None
        self._phase = None
        self._ready = None
        self._reason = None
        self.discriminator = None

        if containers is not None:
            self.containers = containers
        if deployed_timestamp is not None:
            self.deployed_timestamp = deployed_timestamp
        if host is not None:
            self.host = host
        self.message = message
        if name is not None:
            self.name = name
        if phase is not None:
            self.phase = phase
        if ready is not None:
            self.ready = ready
        self.reason = reason

    @property
    def containers(self):
        """Gets the containers of this KubernetesPod.  # noqa: E501


        :return: The containers of this KubernetesPod.  # noqa: E501
        :rtype: list[KubernetesContainer]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this KubernetesPod.


        :param containers: The containers of this KubernetesPod.  # noqa: E501
        :type containers: list[KubernetesContainer]
        """

        self._containers = containers

    @property
    def deployed_timestamp(self):
        """Gets the deployed_timestamp of this KubernetesPod.  # noqa: E501

        Time at which the pod was deployed  # noqa: E501

        :return: The deployed_timestamp of this KubernetesPod.  # noqa: E501
        :rtype: float
        """
        return self._deployed_timestamp

    @deployed_timestamp.setter
    def deployed_timestamp(self, deployed_timestamp):
        """Sets the deployed_timestamp of this KubernetesPod.

        Time at which the pod was deployed  # noqa: E501

        :param deployed_timestamp: The deployed_timestamp of this KubernetesPod.  # noqa: E501
        :type deployed_timestamp: float
        """

        self._deployed_timestamp = deployed_timestamp

    @property
    def host(self):
        """Gets the host of this KubernetesPod.  # noqa: E501

        name of the pod's host  # noqa: E501

        :return: The host of this KubernetesPod.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this KubernetesPod.

        name of the pod's host  # noqa: E501

        :param host: The host of this KubernetesPod.  # noqa: E501
        :type host: str
        """

        self._host = host

    @property
    def message(self):
        """Gets the message of this KubernetesPod.  # noqa: E501

        long message explaining the pod's state  # noqa: E501

        :return: The message of this KubernetesPod.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this KubernetesPod.

        long message explaining the pod's state  # noqa: E501

        :param message: The message of this KubernetesPod.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this KubernetesPod.  # noqa: E501

        name of the pod in Kubernetes  # noqa: E501

        :return: The name of this KubernetesPod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubernetesPod.

        name of the pod in Kubernetes  # noqa: E501

        :param name: The name of this KubernetesPod.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def phase(self):
        """Gets the phase of this KubernetesPod.  # noqa: E501

        The status of the pod  # noqa: E501

        :return: The phase of this KubernetesPod.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this KubernetesPod.

        The status of the pod  # noqa: E501

        :param phase: The phase of this KubernetesPod.  # noqa: E501
        :type phase: str
        """

        self._phase = phase

    @property
    def ready(self):
        """Gets the ready of this KubernetesPod.  # noqa: E501

        Whether or not the pod is ready (i.e. all containers up)  # noqa: E501

        :return: The ready of this KubernetesPod.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this KubernetesPod.

        Whether or not the pod is ready (i.e. all containers up)  # noqa: E501

        :param ready: The ready of this KubernetesPod.  # noqa: E501
        :type ready: bool
        """

        self._ready = ready

    @property
    def reason(self):
        """Gets the reason of this KubernetesPod.  # noqa: E501

        short message explaining the pod's state  # noqa: E501

        :return: The reason of this KubernetesPod.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this KubernetesPod.

        short message explaining the pod's state  # noqa: E501

        :param reason: The reason of this KubernetesPod.  # noqa: E501
        :type reason: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubernetesPod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubernetesPod):
            return True

        return self.to_dict() != other.to_dict()
