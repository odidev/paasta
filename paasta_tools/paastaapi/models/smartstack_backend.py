# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class SmartstackBackend(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check_code': 'str',
        'check_duration': 'int',
        'check_status': 'str',
        'has_associated_task': 'bool',
        'hostname': 'str',
        'last_change': 'int',
        'port': 'int',
        'status': 'str'
    }

    attribute_map = {
        'check_code': 'check_code',
        'check_duration': 'check_duration',
        'check_status': 'check_status',
        'has_associated_task': 'has_associated_task',
        'hostname': 'hostname',
        'last_change': 'last_change',
        'port': 'port',
        'status': 'status'
    }

    def __init__(self, check_code=None, check_duration=None, check_status=None, has_associated_task=None, hostname=None, last_change=None, port=None, status=None, local_vars_configuration=None):  # noqa: E501
        """SmartstackBackend - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._check_code = None
        self._check_duration = None
        self._check_status = None
        self._has_associated_task = None
        self._hostname = None
        self._last_change = None
        self._port = None
        self._status = None
        self.discriminator = None

        if check_code is not None:
            self.check_code = check_code
        if check_duration is not None:
            self.check_duration = check_duration
        if check_status is not None:
            self.check_status = check_status
        if has_associated_task is not None:
            self.has_associated_task = has_associated_task
        if hostname is not None:
            self.hostname = hostname
        if last_change is not None:
            self.last_change = last_change
        if port is not None:
            self.port = port
        if status is not None:
            self.status = status

    @property
    def check_code(self):
        """Gets the check_code of this SmartstackBackend.  # noqa: E501

        Check code reported by HAProxy  # noqa: E501

        :return: The check_code of this SmartstackBackend.  # noqa: E501
        :rtype: str
        """
        return self._check_code

    @check_code.setter
    def check_code(self, check_code):
        """Sets the check_code of this SmartstackBackend.

        Check code reported by HAProxy  # noqa: E501

        :param check_code: The check_code of this SmartstackBackend.  # noqa: E501
        :type check_code: str
        """

        self._check_code = check_code

    @property
    def check_duration(self):
        """Gets the check_duration of this SmartstackBackend.  # noqa: E501

        Duration in ms of the last health check performed by HAProxy  # noqa: E501

        :return: The check_duration of this SmartstackBackend.  # noqa: E501
        :rtype: int
        """
        return self._check_duration

    @check_duration.setter
    def check_duration(self, check_duration):
        """Sets the check_duration of this SmartstackBackend.

        Duration in ms of the last health check performed by HAProxy  # noqa: E501

        :param check_duration: The check_duration of this SmartstackBackend.  # noqa: E501
        :type check_duration: int
        """

        self._check_duration = check_duration

    @property
    def check_status(self):
        """Gets the check_status of this SmartstackBackend.  # noqa: E501

        Status of last health check of the backend  # noqa: E501

        :return: The check_status of this SmartstackBackend.  # noqa: E501
        :rtype: str
        """
        return self._check_status

    @check_status.setter
    def check_status(self, check_status):
        """Sets the check_status of this SmartstackBackend.

        Status of last health check of the backend  # noqa: E501

        :param check_status: The check_status of this SmartstackBackend.  # noqa: E501
        :type check_status: str
        """

        self._check_status = check_status

    @property
    def has_associated_task(self):
        """Gets the has_associated_task of this SmartstackBackend.  # noqa: E501

        Whether this backend has an associated task running  # noqa: E501

        :return: The has_associated_task of this SmartstackBackend.  # noqa: E501
        :rtype: bool
        """
        return self._has_associated_task

    @has_associated_task.setter
    def has_associated_task(self, has_associated_task):
        """Sets the has_associated_task of this SmartstackBackend.

        Whether this backend has an associated task running  # noqa: E501

        :param has_associated_task: The has_associated_task of this SmartstackBackend.  # noqa: E501
        :type has_associated_task: bool
        """

        self._has_associated_task = has_associated_task

    @property
    def hostname(self):
        """Gets the hostname of this SmartstackBackend.  # noqa: E501

        Name of the host on which the backend is running  # noqa: E501

        :return: The hostname of this SmartstackBackend.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SmartstackBackend.

        Name of the host on which the backend is running  # noqa: E501

        :param hostname: The hostname of this SmartstackBackend.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def last_change(self):
        """Gets the last_change of this SmartstackBackend.  # noqa: E501

        Seconds since last change in backend status  # noqa: E501

        :return: The last_change of this SmartstackBackend.  # noqa: E501
        :rtype: int
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this SmartstackBackend.

        Seconds since last change in backend status  # noqa: E501

        :param last_change: The last_change of this SmartstackBackend.  # noqa: E501
        :type last_change: int
        """

        self._last_change = last_change

    @property
    def port(self):
        """Gets the port of this SmartstackBackend.  # noqa: E501

        Port number on which the backend responds  # noqa: E501

        :return: The port of this SmartstackBackend.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SmartstackBackend.

        Port number on which the backend responds  # noqa: E501

        :param port: The port of this SmartstackBackend.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def status(self):
        """Gets the status of this SmartstackBackend.  # noqa: E501

        Status of the backend in HAProxy  # noqa: E501

        :return: The status of this SmartstackBackend.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SmartstackBackend.

        Status of the backend in HAProxy  # noqa: E501

        :param status: The status of this SmartstackBackend.  # noqa: E501
        :type status: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartstackBackend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmartstackBackend):
            return True

        return self.to_dict() != other.to_dict()
