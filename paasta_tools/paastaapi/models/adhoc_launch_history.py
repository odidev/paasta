# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class AdhocLaunchHistory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'framework_id': 'str',
        'launch_time': 'str',
        'run_id': 'str'
    }

    attribute_map = {
        'framework_id': 'framework_id',
        'launch_time': 'launch_time',
        'run_id': 'run_id'
    }

    def __init__(self, framework_id=None, launch_time=None, run_id=None, local_vars_configuration=None):  # noqa: E501
        """AdhocLaunchHistory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._framework_id = None
        self._launch_time = None
        self._run_id = None
        self.discriminator = None

        if framework_id is not None:
            self.framework_id = framework_id
        if launch_time is not None:
            self.launch_time = launch_time
        if run_id is not None:
            self.run_id = run_id

    @property
    def framework_id(self):
        """Gets the framework_id of this AdhocLaunchHistory.  # noqa: E501

        framework id  # noqa: E501

        :return: The framework_id of this AdhocLaunchHistory.  # noqa: E501
        :rtype: str
        """
        return self._framework_id

    @framework_id.setter
    def framework_id(self, framework_id):
        """Sets the framework_id of this AdhocLaunchHistory.

        framework id  # noqa: E501

        :param framework_id: The framework_id of this AdhocLaunchHistory.  # noqa: E501
        :type framework_id: str
        """

        self._framework_id = framework_id

    @property
    def launch_time(self):
        """Gets the launch_time of this AdhocLaunchHistory.  # noqa: E501

        when the job was launched  # noqa: E501

        :return: The launch_time of this AdhocLaunchHistory.  # noqa: E501
        :rtype: str
        """
        return self._launch_time

    @launch_time.setter
    def launch_time(self, launch_time):
        """Sets the launch_time of this AdhocLaunchHistory.

        when the job was launched  # noqa: E501

        :param launch_time: The launch_time of this AdhocLaunchHistory.  # noqa: E501
        :type launch_time: str
        """

        self._launch_time = launch_time

    @property
    def run_id(self):
        """Gets the run_id of this AdhocLaunchHistory.  # noqa: E501

        id of the single run  # noqa: E501

        :return: The run_id of this AdhocLaunchHistory.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this AdhocLaunchHistory.

        id of the single run  # noqa: E501

        :param run_id: The run_id of this AdhocLaunchHistory.  # noqa: E501
        :type run_id: str
        """

        self._run_id = run_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdhocLaunchHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdhocLaunchHistory):
            return True

        return self.to_dict() != other.to_dict()
