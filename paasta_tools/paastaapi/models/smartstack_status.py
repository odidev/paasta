# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class SmartstackStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expected_backends_per_location': 'int',
        'locations': 'list[SmartstackLocation]',
        'registration': 'str'
    }

    attribute_map = {
        'expected_backends_per_location': 'expected_backends_per_location',
        'locations': 'locations',
        'registration': 'registration'
    }

    def __init__(self, expected_backends_per_location=None, locations=None, registration=None, local_vars_configuration=None):  # noqa: E501
        """SmartstackStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._expected_backends_per_location = None
        self._locations = None
        self._registration = None
        self.discriminator = None

        if expected_backends_per_location is not None:
            self.expected_backends_per_location = expected_backends_per_location
        if locations is not None:
            self.locations = locations
        if registration is not None:
            self.registration = registration

    @property
    def expected_backends_per_location(self):
        """Gets the expected_backends_per_location of this SmartstackStatus.  # noqa: E501

        Number of backends expected to be present in each location  # noqa: E501

        :return: The expected_backends_per_location of this SmartstackStatus.  # noqa: E501
        :rtype: int
        """
        return self._expected_backends_per_location

    @expected_backends_per_location.setter
    def expected_backends_per_location(self, expected_backends_per_location):
        """Sets the expected_backends_per_location of this SmartstackStatus.

        Number of backends expected to be present in each location  # noqa: E501

        :param expected_backends_per_location: The expected_backends_per_location of this SmartstackStatus.  # noqa: E501
        :type expected_backends_per_location: int
        """

        self._expected_backends_per_location = expected_backends_per_location

    @property
    def locations(self):
        """Gets the locations of this SmartstackStatus.  # noqa: E501

        Locations the service is deployed  # noqa: E501

        :return: The locations of this SmartstackStatus.  # noqa: E501
        :rtype: list[SmartstackLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this SmartstackStatus.

        Locations the service is deployed  # noqa: E501

        :param locations: The locations of this SmartstackStatus.  # noqa: E501
        :type locations: list[SmartstackLocation]
        """

        self._locations = locations

    @property
    def registration(self):
        """Gets the registration of this SmartstackStatus.  # noqa: E501

        Registration name of the service in Smartstack  # noqa: E501

        :return: The registration of this SmartstackStatus.  # noqa: E501
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this SmartstackStatus.

        Registration name of the service in Smartstack  # noqa: E501

        :param registration: The registration of this SmartstackStatus.  # noqa: E501
        :type registration: str
        """

        self._registration = registration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartstackStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmartstackStatus):
            return True

        return self.to_dict() != other.to_dict()
