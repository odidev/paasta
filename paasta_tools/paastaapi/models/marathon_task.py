# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class MarathonTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deployed_timestamp': 'float',
        'host': 'str',
        'id': 'str',
        'is_healthy': 'bool',
        'port': 'int'
    }

    attribute_map = {
        'deployed_timestamp': 'deployed_timestamp',
        'host': 'host',
        'id': 'id',
        'is_healthy': 'is_healthy',
        'port': 'port'
    }

    def __init__(self, deployed_timestamp=None, host=None, id=None, is_healthy=None, port=None, local_vars_configuration=None):  # noqa: E501
        """MarathonTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deployed_timestamp = None
        self._host = None
        self._id = None
        self._is_healthy = None
        self._port = None
        self.discriminator = None

        if deployed_timestamp is not None:
            self.deployed_timestamp = deployed_timestamp
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if is_healthy is not None:
            self.is_healthy = is_healthy
        if port is not None:
            self.port = port

    @property
    def deployed_timestamp(self):
        """Gets the deployed_timestamp of this MarathonTask.  # noqa: E501

        Time at which the task was deployed  # noqa: E501

        :return: The deployed_timestamp of this MarathonTask.  # noqa: E501
        :rtype: float
        """
        return self._deployed_timestamp

    @deployed_timestamp.setter
    def deployed_timestamp(self, deployed_timestamp):
        """Sets the deployed_timestamp of this MarathonTask.

        Time at which the task was deployed  # noqa: E501

        :param deployed_timestamp: The deployed_timestamp of this MarathonTask.  # noqa: E501
        :type deployed_timestamp: float
        """

        self._deployed_timestamp = deployed_timestamp

    @property
    def host(self):
        """Gets the host of this MarathonTask.  # noqa: E501

        Name of the host on which the task is running  # noqa: E501

        :return: The host of this MarathonTask.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this MarathonTask.

        Name of the host on which the task is running  # noqa: E501

        :param host: The host of this MarathonTask.  # noqa: E501
        :type host: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this MarathonTask.  # noqa: E501

        ID of the task in Mesos  # noqa: E501

        :return: The id of this MarathonTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarathonTask.

        ID of the task in Mesos  # noqa: E501

        :param id: The id of this MarathonTask.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def is_healthy(self):
        """Gets the is_healthy of this MarathonTask.  # noqa: E501

        Whether Marathon thinks the task is healthy  # noqa: E501

        :return: The is_healthy of this MarathonTask.  # noqa: E501
        :rtype: bool
        """
        return self._is_healthy

    @is_healthy.setter
    def is_healthy(self, is_healthy):
        """Sets the is_healthy of this MarathonTask.

        Whether Marathon thinks the task is healthy  # noqa: E501

        :param is_healthy: The is_healthy of this MarathonTask.  # noqa: E501
        :type is_healthy: bool
        """

        self._is_healthy = is_healthy

    @property
    def port(self):
        """Gets the port of this MarathonTask.  # noqa: E501

        Port on which the task is listening  # noqa: E501

        :return: The port of this MarathonTask.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this MarathonTask.

        Port on which the task is listening  # noqa: E501

        :param port: The port of this MarathonTask.  # noqa: E501
        :type port: int
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarathonTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarathonTask):
            return True

        return self.to_dict() != other.to_dict()
