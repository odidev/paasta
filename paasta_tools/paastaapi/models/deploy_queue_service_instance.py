# coding: utf-8

"""
    Paasta API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paasta_tools.paastaapi.configuration import Configuration


class DeployQueueServiceInstance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bounce_by': 'float',
        'bounce_start_time': 'float',
        'enqueue_time': 'float',
        'failures': 'int',
        'instance': 'str',
        'processed_count': 'int',
        'service': 'str',
        'wait_until': 'float',
        'watcher': 'str'
    }

    attribute_map = {
        'bounce_by': 'bounce_by',
        'bounce_start_time': 'bounce_start_time',
        'enqueue_time': 'enqueue_time',
        'failures': 'failures',
        'instance': 'instance',
        'processed_count': 'processed_count',
        'service': 'service',
        'wait_until': 'wait_until',
        'watcher': 'watcher'
    }

    def __init__(self, bounce_by=None, bounce_start_time=None, enqueue_time=None, failures=None, instance=None, processed_count=None, service=None, wait_until=None, watcher=None, local_vars_configuration=None):  # noqa: E501
        """DeployQueueServiceInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bounce_by = None
        self._bounce_start_time = None
        self._enqueue_time = None
        self._failures = None
        self._instance = None
        self._processed_count = None
        self._service = None
        self._wait_until = None
        self._watcher = None
        self.discriminator = None

        if bounce_by is not None:
            self.bounce_by = bounce_by
        if bounce_start_time is not None:
            self.bounce_start_time = bounce_start_time
        if enqueue_time is not None:
            self.enqueue_time = enqueue_time
        if failures is not None:
            self.failures = failures
        if instance is not None:
            self.instance = instance
        if processed_count is not None:
            self.processed_count = processed_count
        if service is not None:
            self.service = service
        if wait_until is not None:
            self.wait_until = wait_until
        if watcher is not None:
            self.watcher = watcher

    @property
    def bounce_by(self):
        """Gets the bounce_by of this DeployQueueServiceInstance.  # noqa: E501

        Desired timestamp by which the service instance should be bounced  # noqa: E501

        :return: The bounce_by of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._bounce_by

    @bounce_by.setter
    def bounce_by(self, bounce_by):
        """Sets the bounce_by of this DeployQueueServiceInstance.

        Desired timestamp by which the service instance should be bounced  # noqa: E501

        :param bounce_by: The bounce_by of this DeployQueueServiceInstance.  # noqa: E501
        :type bounce_by: float
        """

        self._bounce_by = bounce_by

    @property
    def bounce_start_time(self):
        """Gets the bounce_start_time of this DeployQueueServiceInstance.  # noqa: E501

        Timestamp at which service instance was first added to the queue  # noqa: E501

        :return: The bounce_start_time of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._bounce_start_time

    @bounce_start_time.setter
    def bounce_start_time(self, bounce_start_time):
        """Sets the bounce_start_time of this DeployQueueServiceInstance.

        Timestamp at which service instance was first added to the queue  # noqa: E501

        :param bounce_start_time: The bounce_start_time of this DeployQueueServiceInstance.  # noqa: E501
        :type bounce_start_time: float
        """

        self._bounce_start_time = bounce_start_time

    @property
    def enqueue_time(self):
        """Gets the enqueue_time of this DeployQueueServiceInstance.  # noqa: E501

        Timestamp at which the service instance was last added to the queue  # noqa: E501

        :return: The enqueue_time of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._enqueue_time

    @enqueue_time.setter
    def enqueue_time(self, enqueue_time):
        """Sets the enqueue_time of this DeployQueueServiceInstance.

        Timestamp at which the service instance was last added to the queue  # noqa: E501

        :param enqueue_time: The enqueue_time of this DeployQueueServiceInstance.  # noqa: E501
        :type enqueue_time: float
        """

        self._enqueue_time = enqueue_time

    @property
    def failures(self):
        """Gets the failures of this DeployQueueServiceInstance.  # noqa: E501

        Number of times deployment actions have failed on this service instance  # noqa: E501

        :return: The failures of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: int
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this DeployQueueServiceInstance.

        Number of times deployment actions have failed on this service instance  # noqa: E501

        :param failures: The failures of this DeployQueueServiceInstance.  # noqa: E501
        :type failures: int
        """

        self._failures = failures

    @property
    def instance(self):
        """Gets the instance of this DeployQueueServiceInstance.  # noqa: E501

        Name of the instance of the service  # noqa: E501

        :return: The instance of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this DeployQueueServiceInstance.

        Name of the instance of the service  # noqa: E501

        :param instance: The instance of this DeployQueueServiceInstance.  # noqa: E501
        :type instance: str
        """

        self._instance = instance

    @property
    def processed_count(self):
        """Gets the processed_count of this DeployQueueServiceInstance.  # noqa: E501

        Number of times any deployment action has been taken on this service instance  # noqa: E501

        :return: The processed_count of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: int
        """
        return self._processed_count

    @processed_count.setter
    def processed_count(self, processed_count):
        """Sets the processed_count of this DeployQueueServiceInstance.

        Number of times any deployment action has been taken on this service instance  # noqa: E501

        :param processed_count: The processed_count of this DeployQueueServiceInstance.  # noqa: E501
        :type processed_count: int
        """

        self._processed_count = processed_count

    @property
    def service(self):
        """Gets the service of this DeployQueueServiceInstance.  # noqa: E501

        Name of the service  # noqa: E501

        :return: The service of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DeployQueueServiceInstance.

        Name of the service  # noqa: E501

        :param service: The service of this DeployQueueServiceInstance.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def wait_until(self):
        """Gets the wait_until of this DeployQueueServiceInstance.  # noqa: E501

        Timestamp before which no action should be taken on this service instance  # noqa: E501

        :return: The wait_until of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: float
        """
        return self._wait_until

    @wait_until.setter
    def wait_until(self, wait_until):
        """Sets the wait_until of this DeployQueueServiceInstance.

        Timestamp before which no action should be taken on this service instance  # noqa: E501

        :param wait_until: The wait_until of this DeployQueueServiceInstance.  # noqa: E501
        :type wait_until: float
        """

        self._wait_until = wait_until

    @property
    def watcher(self):
        """Gets the watcher of this DeployQueueServiceInstance.  # noqa: E501

        The process that enqueued the task  # noqa: E501

        :return: The watcher of this DeployQueueServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._watcher

    @watcher.setter
    def watcher(self, watcher):
        """Sets the watcher of this DeployQueueServiceInstance.

        The process that enqueued the task  # noqa: E501

        :param watcher: The watcher of this DeployQueueServiceInstance.  # noqa: E501
        :type watcher: str
        """

        self._watcher = watcher

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeployQueueServiceInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeployQueueServiceInstance):
            return True

        return self.to_dict() != other.to_dict()
